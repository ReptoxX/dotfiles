#!/usr/bin/env bash
# This wrapper is meant for an easier use of CyberghostVPN
# It is not meant to be used as a standalone script

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
    printf "bash version 4 or higher is required\n" >&2
    exit 1
fi

# Enforce Root, because cyberghost-vpn requires root
if [[ $EUID -ne 0 ]]; then
    exec sudo "$0" "$@"
fi

version_command() {
  echo "$version"
}

cgw_usage() {
  printf "cgw - CyberghostVPN Wrapper CLI\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  cgw COMMAND\n"
  printf "  cgw [COMMAND] --help | -h\n"
  printf "  cgw --version | -v\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Connect to a VPN at specified location\n" "$(green_underlined "connect")   "
  printf "  %s   Disconnect from VPN\n" "$(green_underlined "disconnect")"
  printf "  %s   Get your public IP address\n" "$(green_underlined "get-ip")    "
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

cgw_connect_usage() {
  printf "cgw connect - Connect to a VPN at specified location\n\n"
  printf "Alias: c\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  cgw connect [COUNTRYCODE]\n"
  printf "  cgw connect --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    printf "%s\n" "$(bold "Arguments:")"

    printf "  %s\n" "$(blue "COUNTRYCODE")"
    printf "    Country code to connect to (default: current country)\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  cgw connect\n"
    printf "  cgw connect US\n"
    printf "  cgw connect DE\n"
    echo

  fi
}

cgw_disconnect_usage() {
  printf "cgw disconnect - Disconnect from VPN\n\n"
  printf "Alias: d\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  cgw disconnect\n"
  printf "  cgw disconnect --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

cgw_get_ip_usage() {
  printf "cgw get-ip - Get your public IP address\n\n"
  printf "Alias: gi\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  cgw get-ip\n"
  printf "  cgw get-ip --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

get_current_country_code() {
    local country_code
    country_code="$(${deps[curl]} -s 'ip-api.com/json?fields=countryCode')"
    echo "${country_code}"
}

check_country_code() {
    COUNTRY_CODE="$1"

    # Check validity of country code
    COUNTRY_CODE_LIST=$(${deps[cyberghostvpn]} --country-code | grep -c "$COUNTRY_CODE")
    # This is a markdown list with three items per line where the last item is the country code
    if [ ! "$COUNTRY_CODE_LIST" -gt 0 ]; then
        echo "Invalid country code: $COUNTRY_CODE" 1>&2
        exit 1
    fi
}

filter_enforce_root() {
    if [[ $EUID -ne 0 ]]; then
        echo "This script must be run as root"
    fi
}

cgw_connect_command() {
  # echo "# this file is located in 'src/connect_command.sh'"
  # echo "# code for 'cgw connect' goes here"
  # echo "# you can edit it freely and regenerate (it will not be overwritten)"
  # inspect_args

  cc=${args[countrycode]}

  if [[ -z "$cc" ]]; then
      cc="$(get_current_country_code)"
  fi

  check_country_code "$cc"

  "${deps[cyberghostvpn]}" --country-code "$cc" --connect

}

cgw_disconnect_command() {
  "${deps[cyberghostvpn]}" --stop

}

cgw_get_ip_command() {
  "${deps[curl]}" -s ip-api.com

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cgw_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    printf "%s\n" "install with $(green \"apt install curl\")" >&2
    exit 1
  fi

  if command -v cyberghostvpn >/dev/null 2>&1; then
    deps['cyberghostvpn']="$(command -v cyberghostvpn | head -n1)"
  else
    printf "missing dependency: cyberghostvpn\n" >&2
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    connect | c)
      action="connect"
      shift
      cgw_connect_parse_requirements "$@"
      shift $#
      ;;

    disconnect | d)
      action="disconnect"
      shift
      cgw_disconnect_parse_requirements "$@"
      shift $#
      ;;

    get-ip | gi)
      action="get-ip"
      shift
      cgw_get_ip_parse_requirements "$@"
      shift $#
      ;;

    "")
      cgw_usage >&2
      exit 1
      ;;

    *)
      if [[ -x "$(command -v "cyberghostvpn")" ]]; then
        exec cyberghostvpn "$@"
      else
        printf "invalid command: %s\n" "$action" >&2
        exit 1
      fi
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

cgw_connect_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cgw_connect_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="connect"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['countrycode']+x} ]]; then
          args['countrycode']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  filter_error=$(filter_enforce_root)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

cgw_disconnect_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cgw_disconnect_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="disconnect"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  filter_error=$(filter_enforce_root)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

cgw_get_ip_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cgw_get_ip_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="get-ip"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

initialize() {
  version="1.0.1"
  long_usage=''
  set -e

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "connect") cgw_connect_command ;;
    "disconnect") cgw_disconnect_command ;;
    "get-ip") cgw_get_ip_command ;;
  esac
}

initialize
run "$@"
